import asyncio
import re
import logging
import html # <-- –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery, LinkPreviewOptions, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from config_reader import config
from database import (
    init_db, save_message, get_messages, get_tags,
    get_messages_by_tag, delete_messages, delete_message_by_id,
    validate_text, validate_description, validate_tag
)
from keyboards import (
    get_main_keyboard, get_tag_choice_keyboard,
    get_cancel_keyboard, get_skip_keyboard, create_tags_keyboard,
    get_delete_confirmation_keyboard
)
from states import UserState

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ALLOWED_USER_ID = config.allowed_user_id

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.bot_token.get_secret_value())
dp = Dispatcher(storage=MemoryStorage())


def is_url(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç URL-–∞–¥—Ä–µ—Å–æ–º."""
    url_pattern = re.compile(
        r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    )
    return bool(url_pattern.match(text))


async def check_access(message: types.Message | types.CallbackQuery) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É."""
    if message.from_user.id != ALLOWED_USER_ID:
        if isinstance(message, types.Message):
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        else: # CallbackQuery
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        logging.warning(f"Unauthorized access attempt by user {message.from_user.id}")
        return False
    return True

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL –∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ ---

@dp.message(lambda message: is_url(message.text))
async def handle_url(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return

    await state.update_data(temp_url=message.text)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="save_url"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_url")
        ]
    ])

    await message.answer("–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π?", reply_markup=keyboard)


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    await state.clear()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã ---

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_action(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()

    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

# --- FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ ---

@dp.message(UserState.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    if not await check_access(message): return

    is_valid, error_message = await validate_text(message.text)
    if not is_valid:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}", reply_markup=get_cancel_keyboard())
        return

    await state.update_data(user_text=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏\n(–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª):", reply_markup=get_skip_keyboard())
    await state.set_state(UserState.waiting_for_description)


@dp.message(UserState.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    if not await check_access(message): return

    if message.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(description=None)
    else:
        is_valid, error_message = await validate_description(message.text)
        if not is_valid:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}", reply_markup=get_skip_keyboard())
            return
        await state.update_data(description=message.text.strip())

    await message.answer("–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥?", reply_markup=get_tag_choice_keyboard())
    await state.set_state(UserState.waiting_for_tag_choice)


@dp.message(UserState.waiting_for_tag_choice)
async def process_tag_choice(message: types.Message, state: FSMContext):
    if not await check_access(message): return

    if message.text.lower() == "–¥–∞":
        tags = await get_tags(message.from_user.id)
        kb = [[types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥")]]
        if tags:
            kb.extend([[types.KeyboardButton(text=tag[0])] for tag, count in tags if tag[0] != "no_tag"])
        kb.append([types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")])
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=keyboard)
        await state.set_state(UserState.waiting_for_tag)

    elif message.text.lower() == "–Ω–µ—Ç":
        data = await state.get_data()
        save_result = await save_message(
            message.from_user.id,
            data.get("user_text"),
            "no_tag",
            data.get("description"),
            datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        )
        if save_result:
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ —Ç–µ–≥–∞!", reply_markup=get_main_keyboard())
        else:
            await message.answer("‚ùå –¢–∞–∫–∞—è –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=get_main_keyboard())
        await state.clear()


@dp.message(UserState.waiting_for_tag)
async def process_tag(message: types.Message, state: FSMContext):
    if not await check_access(message): return

    if message.text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–≥:", reply_markup=get_cancel_keyboard())
        await state.update_data(creating_new_tag=True)
        return

    is_valid, error_message = await validate_tag(message.text)
    if not is_valid:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}", reply_markup=get_cancel_keyboard())
        return

    data = await state.get_data()
    save_result = await save_message(
        message.from_user.id,
        data.get("user_text"),
        message.text.strip(),
        data.get("description"),
        datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    )

    if save_result:
        action_type = "–Ω–æ–≤—ã–º" if data.get("creating_new_tag", False) else "—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º"
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å {action_type} —Ç–µ–≥–æ–º!", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚ùå –¢–∞–∫–∞—è –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=get_main_keyboard())
    await state.clear()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---

@dp.message(F.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏")
async def view_records_handler(message: types.Message):
    if not await check_access(message): return

    records = await get_messages(message.from_user.id)
    if not records:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", reply_markup=get_main_keyboard())
        return

    for record_id, text, tag, description, timestamp in records:
        date_obj = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
        formatted_date = date_obj.strftime('%d.%m.%Y')

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        safe_text = html.escape(str(text))
        safe_description = html.escape(str(description)) if description else None
        safe_tag = html.escape(str(tag))

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        response = f"üìù <b>–¢–µ–∫—Å—Ç:</b> {safe_text}\n"
        if safe_description:
            response += f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {safe_description}\n"
        response += f"üè∑ <b>–¢–µ–≥:</b> {safe_tag}\n‚è∞ <b>–í—Ä–µ–º—è:</b> {formatted_date}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"del_{record_id}")]])
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å parse_mode="HTML"
        await message.answer(response, parse_mode="HTML", link_preview_options=LinkPreviewOptions(is_disabled=True), reply_markup=keyboard)


@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É")
async def search_by_tag_handler(message: types.Message, state: FSMContext):
    if not await check_access(message): return

    tags = await get_tags(message.from_user.id)
    keyboard = create_tags_keyboard(tags)

    if not keyboard:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤.", reply_markup=get_main_keyboard())
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)
    await state.set_state(UserState.waiting_for_tag_selection)


@dp.message(UserState.waiting_for_tag_selection)
async def process_tag_selection(message: types.Message, state: FSMContext):
    if not await check_access(message): return

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_main_keyboard())
        await state.clear()
        return

    tag = message.text.split(" (")[0]
    records = await get_messages_by_tag(message.from_user.id, tag)
    if not records:
        await message.answer(f"üì≠ –ó–∞–ø–∏—Å–∏ —Å —Ç–µ–≥–æ–º '{tag}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_main_keyboard())
        await state.clear()
        return

    await message.answer(f"üîç –ó–∞–ø–∏—Å–∏ —Å —Ç–µ–≥–æ–º '<b>{html.escape(tag)}</b>':", parse_mode="HTML")
    for record_id, text, description, timestamp in records:
        date_obj = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
        formatted_date = date_obj.strftime('%d.%m.%Y')

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        safe_text = html.escape(str(text))
        safe_description = html.escape(str(description)) if description else None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ç–µ–≥–∏
        response = f"üìù <b>–¢–µ–∫—Å—Ç:</b> {safe_text}\n"
        if safe_description:
            response += f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {safe_description}\n"
        response += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {formatted_date}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"del_{record_id}")]])
        await message.answer(response, parse_mode="HTML", link_preview_options=LinkPreviewOptions(is_disabled=True), reply_markup=keyboard)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
    await state.clear()


@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å—ë")
async def confirm_deletion_handler(message: types.Message, state: FSMContext):
    if not await check_access(message): return
    keyboard = ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë")], [types.KeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")]], resize_keyboard=True)
    await message.answer(
        "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏?",
        parse_mode="HTML", reply_markup=keyboard
    )
    await state.set_state(UserState.waiting_for_deletion_confirmation)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ (—É–¥–∞–ª–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ URL) ---

@dp.callback_query(F.data == "save_url")
async def process_save_url_callback(callback_query: CallbackQuery, state: FSMContext):
    if not await check_access(callback_query): return

    data = await state.get_data()
    url = data.get("temp_url")
    if url:
        await state.update_data(user_text=url)
        await callback_query.message.edit_text("–°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏:", reply_markup=get_skip_keyboard())
        await state.set_state(UserState.waiting_for_description)
    else:
        await callback_query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await callback_query.answer()


@dp.callback_query(F.data == "cancel_url")
async def process_cancel_url_callback(callback_query: CallbackQuery):
    await callback_query.message.edit_text("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.answer()


@dp.callback_query(F.data.startswith('del_'))
async def process_delete_callback(callback_query: CallbackQuery):
    if not await check_access(callback_query): return
    record_id = int(callback_query.data.split('_')[1])
    keyboard = get_delete_confirmation_keyboard(record_id)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º html_text –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback_query.message.edit_text(
        callback_query.message.html_text + "\n\n‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?</b>",
        parse_mode="HTML", reply_markup=keyboard
    )
    await callback_query.answer()


@dp.callback_query(F.data.startswith('confirm_del_'))
async def confirm_delete_callback(callback_query: CallbackQuery):
    if not await check_access(callback_query): return
    record_id = int(callback_query.data.split('_')[2])
    if await delete_message_by_id(callback_query.from_user.id, record_id):
        await callback_query.message.delete()
        await callback_query.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
    else:
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å.", show_alert=True)


@dp.callback_query(F.data.startswith('cancel_del_'))
async def cancel_delete_callback(callback_query: CallbackQuery):
    if not await check_access(callback_query): return
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º html_text –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    original_html_text = callback_query.message.html_text.split("\n\n‚ùì")[0]
    record_id = int(callback_query.data.split('_')[2])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"del_{record_id}")]])
    await callback_query.message.edit_text(original_html_text, parse_mode="HTML", reply_markup=keyboard)
    await callback_query.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


# --- –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è ---

@dp.message(UserState.waiting_for_deletion_confirmation)
async def process_deletion_confirmation(message: types.Message, state: FSMContext):
    if not await check_access(message): return

    if message.text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë":
        keyboard = ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —É–¥–∞–ª–µ–Ω–∏–µ")], [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ")]], resize_keyboard=True)
        await message.answer(
            "‚ö†Ô∏è <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!</b>\n\n–í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–ø–∏—Å–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
            parse_mode="HTML", reply_markup=keyboard
        )
        await state.set_state(UserState.waiting_for_final_confirmation)
    else:
        await message.answer("‚Ü©Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
        await state.clear()


@dp.message(UserState.waiting_for_final_confirmation)
async def process_final_deletion(message: types.Message, state: FSMContext):
    if not await check_access(message): return

    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —É–¥–∞–ª–µ–Ω–∏–µ":
        if await delete_messages(message.from_user.id):
            await message.answer("üóë –í—Å–µ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", reply_markup=get_main_keyboard())
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚Ü©Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
    await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---

@dp.message()
async def handle_other_messages(message: types.Message):
    if not await check_access(message): return
    # –Ø–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:", reply_markup=get_cancel_keyboard())
    await message.answer("–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ. –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---

async def main():
    try:
        await init_db()
        await dp.start_polling(bot)
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())