import asyncio
import re
import logging
import html
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery, LinkPreviewOptions, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage
from redis.asyncio.client import Redis

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from config_reader import config
from database import (
    init_db, save_message, get_messages, get_tags,
    get_messages_by_tag, delete_messages, delete_message_by_id,
    validate_text, validate_name, validate_tag, get_message_by_id,
    update_record_field, get_stats
)
from keyboards import (
    get_main_keyboard, get_extra_keyboard, get_tag_choice_keyboard,
    get_cancel_keyboard, get_skip_keyboard, create_tags_keyboard,
    get_delete_confirmation_keyboard
)
from states import UserState
from gdrive_uploader import upload_database_backup, download_latest_backup
from scheduler import setup_scheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ALLOWED_USER_ID = config.allowed_user_id

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
redis_client = Redis(host=config.redis_host, port=config.redis_port)
storage = RedisStorage(redis=redis_client)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.bot_token.get_secret_value())
dp = Dispatcher(storage=storage)


def is_url(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–Ω—ã–º URL-–∞–¥—Ä–µ—Å–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é —Å—Ç—Ä–æ–∫—É."""
    if not isinstance(text, str):
        return False
    # –≠—Ç–æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏—è —Å—Ö–µ–º—ã http/https –∏ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–º–µ—Ç—å –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä–æ–∫–µ
    url_pattern = re.compile(
        r'^https?://'  # –ü—Ä–æ—Ç–æ–∫–æ–ª –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # –¥–æ–º–µ–Ω...
        r'localhost|'  # –∏–ª–∏ localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # –∏–ª–∏ IP
        r'(?::\d+)?'  # –ø–æ—Ä—Ç
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º fullmatch, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å—è —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è URL
    return bool(re.fullmatch(url_pattern, text.strip()))


async def check_access(message: types.Message | types.CallbackQuery) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É."""
    if message.from_user.id != ALLOWED_USER_ID:
        if isinstance(message, types.Message):
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        else: # CallbackQuery
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        logging.warning(f"Unauthorized access attempt by user {message.from_user.id}")
        return False
    return True

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL –∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ ---

@dp.message(lambda message: is_url(message.text))
async def handle_url(message: types.Message, state: FSMContext):
    if not await check_access(message): return
    await state.update_data(temp_url=message.text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="save_url"), InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_url")]
    ])
    await message.answer("–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π?", reply_markup=keyboard)


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    if not await check_access(message): return
    await state.clear()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

# --- FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ ---

@dp.message(F.text == "‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å")
async def new_note_handler(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ –∫–Ω–æ–ø–∫–µ."""
    if not await check_access(message): return
    await state.set_state(UserState.waiting_for_text)
    # (–ò–ó–ú–ï–ù–ï–ù–ò–ï): –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–≤–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –≤–∞—à–µ–π –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏", reply_markup=get_cancel_keyboard())


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_action(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())


@dp.message(UserState.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    if not await check_access(message): return
    is_valid, error_message = await validate_text(message.text)
    if not is_valid:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}", reply_markup=get_cancel_keyboard())
        return
    await state.update_data(user_text=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏\n(–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª):", reply_markup=get_skip_keyboard())
    await state.set_state(UserState.waiting_for_name)

@dp.message(UserState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    if not await check_access(message): return
    if message.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(name=None)
    else:
        is_valid, error_message = await validate_name(message.text)
        if not is_valid:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}", reply_markup=get_skip_keyboard())
            return
        await state.update_data(name=message.text.strip())
    await message.answer("–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥?", reply_markup=get_tag_choice_keyboard())
    await state.set_state(UserState.waiting_for_tag_choice)


@dp.message(UserState.waiting_for_tag_choice)
async def process_tag_choice(message: types.Message, state: FSMContext):
    if not await check_access(message): return
    if message.text.lower() == "–¥–∞":
        tags = await get_tags(message.from_user.id)
        kb = [[types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥")]]
        if tags:
            for tag, count in tags:
                if tag != "no_tag":
                    kb.append([types.KeyboardButton(text=f"{tag} ({count})")])
        kb.append([types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")])
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=keyboard)
        await state.set_state(UserState.waiting_for_tag)
    elif message.text.lower() == "–Ω–µ—Ç":
        data = await state.get_data()
        save_result = await save_message(
            message.from_user.id, data.get("user_text"), "no_tag",
            data.get("name"), datetime.now()
        )
        if save_result:
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ —Ç–µ–≥–∞!", reply_markup=get_main_keyboard())
        else:
            await message.answer("‚ùå –¢–∞–∫–∞—è –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=get_main_keyboard())
        await state.clear()


@dp.message(UserState.waiting_for_tag)
async def process_tag(message: types.Message, state: FSMContext):
    if not await check_access(message): return
    tag_text = message.text.split(" (")[0]
    if tag_text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–≥:", reply_markup=get_cancel_keyboard())
        await state.update_data(creating_new_tag=True)
        return
    is_valid, error_message = await validate_tag(tag_text)
    if not is_valid:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}", reply_markup=get_cancel_keyboard())
        return
    data = await state.get_data()
    save_result = await save_message(
        message.from_user.id, data.get("user_text"), tag_text.strip(),
        data.get("name"), datetime.now()
    )
    if save_result:
        action_type = "–Ω–æ–≤—ã–º" if data.get("creating_new_tag", False) else "—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º"
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å {action_type} —Ç–µ–≥–æ–º!", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚ùå –¢–∞–∫–∞—è –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=get_main_keyboard())
    await state.clear()

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ---
@dp.message(F.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏")
async def view_records_handler(message: types.Message):
    if not await check_access(message): return
    records = await get_messages(message.from_user.id)
    if not records:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", reply_markup=get_main_keyboard())
        return

    grouped_records = {}
    for record in records:
        tag = record['tag']
        if tag not in grouped_records:
            grouped_records[tag] = []
        grouped_records[tag].append(record)

    builder = InlineKeyboardBuilder()
    for tag, recs in sorted(grouped_records.items()):
        display_tag = "–ë–µ–∑ —Ç–µ–≥–∞" if tag == "no_tag" else html.escape(tag)
        builder.row(InlineKeyboardButton(text=f"üìå {display_tag}", callback_data="ignore"))
        for r in recs:
            record_id = r['id']
            record_text = r['message']
            record_name = r['name']
            link_text_content = record_name if record_name else record_text
            link_text = (link_text_content[:40] + '...') if len(link_text_content) > 40 else link_text_content
            safe_link_text = html.escape(link_text)
            builder.row(InlineKeyboardButton(
                text=f"‚Ä¢ {safe_link_text}",
                callback_data=f"view_record_{record_id}"
            ))

    await message.answer("üóÇÔ∏è –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:", reply_markup=builder.as_markup())


@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É")
async def search_by_tag_handler(message: types.Message, state: FSMContext):
    if not await check_access(message): return
    tags = await get_tags(message.from_user.id)
    keyboard = create_tags_keyboard(tags)
    if not keyboard:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤.", reply_markup=get_main_keyboard())
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)
    await state.set_state(UserState.waiting_for_tag_selection)


@dp.message(UserState.waiting_for_tag_selection)
async def process_tag_selection(message: types.Message, state: FSMContext):
    if not await check_access(message): return
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_main_keyboard())
        await state.clear()
        return
    raw_tag_text = message.text.split(" (")[0]
    tag_to_search = "no_tag" if raw_tag_text == "–ë–µ–∑ —Ç–µ–≥–∞" else raw_tag_text
    records = await get_messages_by_tag(message.from_user.id, tag_to_search)
    if not records:
        await message.answer(f"üì≠ –ó–∞–ø–∏—Å–∏ —Å —Ç–µ–≥–æ–º '{raw_tag_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_main_keyboard())
        await state.clear()
        return
    await message.answer(f"üîç –ó–∞–ø–∏—Å–∏ —Å —Ç–µ–≥–æ–º '<b>{html.escape(raw_tag_text)}</b>':", parse_mode="HTML")
    for record in records:
        formatted_date = record['timestamp'].strftime('%d.%m.%Y')
        safe_text = html.escape(str(record['message']))
        safe_name = html.escape(str(record['name'])) if record['name'] else "<i>(–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è)</i>"
        response = (
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {safe_name}\n"
            f"<b>–°—Å—ã–ª–∫–∞:</b> {safe_text}\n"
            f"<b>–î–∞—Ç–∞:</b> {formatted_date}"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_record_{record['id']}")
        builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{record['id']}")
        builder.adjust(2)
        
        await message.answer(response, parse_mode="HTML", link_preview_options=LinkPreviewOptions(is_disabled=True), reply_markup=builder.as_markup())
        
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
    await state.clear()


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –ú–ï–ù–Æ ---

@dp.message(F.text == "‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")
async def extra_menu_handler(message: types.Message):
    if not await check_access(message): return
    await message.answer(
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=get_extra_keyboard()
    )

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_handler(message: types.Message):
    if not await check_access(message): return

    stats = await get_stats(message.from_user.id)

    if stats is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    total_records = stats['total_records']
    total_tags = stats['total_tags']
    popular_tag_info = stats['popular_tag_info']

    if popular_tag_info:
        popular_tag_text = f"<b>–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–µ–≥:</b> {html.escape(popular_tag_info['tag'])} ({popular_tag_info['count']} –∑–∞–ø–∏—Å–µ–π)"
    else:
        popular_tag_text = "<b>–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–µ–≥:</b> (–Ω–µ—Ç —Ç–µ–≥–æ–≤)"

    response_text = (
        "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"<b>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:</b> {total_records}\n"
        f"<b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤:</b> {total_tags}\n"
        f"{popular_tag_text}"
    )

    await message.answer(response_text, parse_mode="HTML")


@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_handler(message: types.Message):
    if not await check_access(message): return
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )

@dp.message(F.text == "üì§ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
@dp.message(Command("backup"))
async def backup_command_handler(message: types.Message):
    if not await check_access(message): return
    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...", reply_markup=get_main_keyboard())
    
    backup_file_path = f"manual_backup_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.sql"

    try:
        dump_command = [
            'pg_dump',
            '--dbname', config.db_dsn,
            '--file', backup_file_path,
            '--format', 'plain',
            '--clean'
        ]

        process = await asyncio.create_subprocess_exec(
            *dump_command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()

        if process.returncode != 0:
            error_message = stderr.decode().strip()
            logging.error(f"pg_dump –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {error_message}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {error_message}")
            return

        file_link = await asyncio.to_thread(upload_database_backup, backup_file_path, os.path.basename(backup_file_path))

        if file_link:
            await message.answer(
                f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ Google Drive!",
                disable_web_page_preview=True
            )
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞ Google Drive.")

    except FileNotFoundError:
        logging.error("–ö–æ–º–∞–Ω–¥–∞ 'pg_dump' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ postgresql-client —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ `pg_dump` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ `postgresql-client`.")
    except Exception as e:
        logging.error(f"Manual backup process failed: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
    finally:
        if os.path.exists(backup_file_path):
            os.remove(backup_file_path)


@dp.message(F.text == "üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±–µ–∫–∞–ø–∞")
async def restore_backup_start_handler(message: types.Message, state: FSMContext):
    if not await check_access(message): return
    confirm_kb = ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–î–ê, –Ø –ü–û–ù–ò–ú–ê–Æ –†–ò–°–ö–ò")],
            [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π —Å Google Drive. "
        "–í—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç **–±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã**.\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        parse_mode="HTML",
        reply_markup=confirm_kb
    )
    await state.set_state(UserState.waiting_for_restore_confirmation)


@dp.message(UserState.waiting_for_restore_confirmation)
async def process_restore_confirmation(message: types.Message, state: FSMContext):
    if not await check_access(message): return
    if message.text == "–î–ê, –Ø –ü–û–ù–ò–ú–ê–Æ –†–ò–°–ö–ò":
        await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...", reply_markup=get_main_keyboard())
        
        temp_backup_path = f"restore_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.sql"
        
        try:
            success = await asyncio.to_thread(download_latest_backup, temp_backup_path)
            
            if not success:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å Google Drive.")
                return

            await message.answer("‚úÖ –ë–µ–∫–∞–ø —Å–∫–∞—á–∞–Ω. –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

            restore_command = [
                'psql',
                '--dbname', config.db_dsn,
                '-f', temp_backup_path
            ]

            process = await asyncio.create_subprocess_exec(
                *restore_command,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()

            if process.returncode != 0:
                error_message = stderr.decode().strip()
                logging.error(f"psql –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {error_message}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ –¥–∞–º–ø–∞: {error_message}")
            else:
                await message.answer(
                    "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!\n\n"
                    "‚ùóÔ∏è<b>–í–∞–∂–Ω–æ:</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ (–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ), "
                    "—á—Ç–æ–±—ã –æ–Ω –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.",
                    parse_mode="HTML"
                )

        except FileNotFoundError:
            logging.error("–ö–æ–º–∞–Ω–¥–∞ 'psql' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ postgresql-client —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ `psql` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ `postgresql-client`.")
        except Exception as e:
            logging.error(f"Restore process failed: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.")
        finally:
            if os.path.exists(temp_backup_path):
                os.remove(temp_backup_path)
            await state.clear()
            
    else:
        await message.answer("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
        await state.clear()


@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å—ë")
async def confirm_deletion_handler(message: types.Message, state: FSMContext):
    if not await check_access(message): return
    keyboard = ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë")], [types.KeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")]], resize_keyboard=True)
    await message.answer(
        "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏?",
        parse_mode="HTML", reply_markup=keyboard
    )
    await state.set_state(UserState.waiting_for_deletion_confirmation)


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–õ–ë–≠–ö–û–í ---
@dp.callback_query(F.data == "ignore")
async def ignore_callback(callback_query: CallbackQuery):
    await callback_query.answer()

@dp.callback_query(F.data.startswith("view_record_"))
async def show_record_details_callback(callback_query: CallbackQuery):
    if not await check_access(callback_query): return
    try:
        record_id = int(callback_query.data.split("_")[2])
    except (IndexError, ValueError):
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ ID –∑–∞–ø–∏—Å–∏.", show_alert=True)
        return

    record = await get_message_by_id(callback_query.from_user.id, record_id)
    if not record:
        await callback_query.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    formatted_date = record['timestamp'].strftime('%d.%m.%Y %H:%M')
    safe_text = html.escape(str(record['message']))
    safe_name = html.escape(str(record['name'])) if record['name'] else "<i>(–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è)</i>"
    safe_tag = "–ë–µ–∑ —Ç–µ–≥–∞" if record['tag'] == "no_tag" else html.escape(str(record['tag']))

    response = (
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {safe_name}\n"
        f"<b>–°—Å—ã–ª–∫–∞:</b> {safe_text}\n"
        f"<b>–¢–µ–≥:</b> {safe_tag}\n"
        f"<b>–î–∞—Ç–∞:</b> {formatted_date}"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_record_{record['id']}")
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{record['id']}")
    builder.adjust(2)

    await callback_query.message.answer(response, parse_mode="HTML", reply_markup=builder.as_markup(), disable_web_page_preview=True)
    await callback_query.answer()

@dp.callback_query(F.data.startswith("edit_record_"))
async def edit_record_menu_callback(callback_query: CallbackQuery):
    record_id = int(callback_query.data.split("_")[2])
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{record_id}")
    builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"edit_link_{record_id}")
    builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥", callback_data=f"edit_tag_{record_id}")
    builder.button(text="üîô –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data=f"close_edit_menu")
    builder.adjust(1)

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=builder.as_markup()
    )
    await callback_query.answer()

@dp.callback_query(F.data == "close_edit_menu")
async def close_edit_menu_callback(callback_query: CallbackQuery):
    await callback_query.message.delete()
    await callback_query.answer()


@dp.callback_query(F.data.startswith("edit_name_"))
async def edit_name_callback(callback_query: CallbackQuery, state: FSMContext):
    record_id = int(callback_query.data.split("_")[2])
    await state.update_data(record_id_to_edit=record_id)
    await state.set_state(UserState.editing_record_name)
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:")
    await callback_query.answer()

@dp.callback_query(F.data.startswith("edit_link_"))
async def edit_link_callback(callback_query: CallbackQuery, state: FSMContext):
    record_id = int(callback_query.data.split("_")[2])
    await state.update_data(record_id_to_edit=record_id)
    await state.set_state(UserState.editing_record_link)
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏:")
    await callback_query.answer()

@dp.callback_query(F.data.startswith("edit_tag_"))
async def edit_tag_callback(callback_query: CallbackQuery, state: FSMContext):
    record_id = int(callback_query.data.split("_")[2])
    await state.update_data(record_id_to_edit=record_id)
    await state.set_state(UserState.editing_record_tag)
    tags = await get_tags(callback_query.from_user.id)
    kb = [[types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥")]]
    if tags:
        for tag in tags:
            if tag['tag'] != "no_tag":
                kb.append([types.KeyboardButton(text=f"{tag['tag']} ({tag['count']})")])
    kb.append([types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")])
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ:", reply_markup=keyboard)
    await callback_query.message.delete()
    await callback_query.answer()

@dp.message(UserState.editing_record_name)
async def process_new_name(message: types.Message, state: FSMContext):
    is_valid, error_message = await validate_name(message.text)
    if not is_valid:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return
    
    data = await state.get_data()
    record_id = data.get("record_id_to_edit")
    
    if await update_record_field(record_id, "name", message.text.strip()):
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())
    await state.clear()

@dp.message(UserState.editing_record_link)
async def process_new_link(message: types.Message, state: FSMContext):
    is_valid, error_message = await validate_text(message.text)
    if not is_valid:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return
    
    data = await state.get_data()
    record_id = data.get("record_id_to_edit")
    
    if await update_record_field(record_id, "message", message.text.strip()):
        await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())
    await state.clear()

@dp.message(UserState.editing_record_tag)
async def process_new_tag(message: types.Message, state: FSMContext):
    tag_text = message.text.split(" (")[0]
    if tag_text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–≥:", reply_markup=get_cancel_keyboard())
        return

    is_valid, error_message = await validate_tag(tag_text)
    if not is_valid:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return
        
    data = await state.get_data()
    record_id = data.get("record_id_to_edit")
    
    if await update_record_field(record_id, "tag", tag_text.strip()):
        await message.answer("‚úÖ –¢–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())
    await state.clear()


@dp.callback_query(F.data == "save_url")
async def process_save_url_callback(callback_query: CallbackQuery, state: FSMContext):
    if not await check_access(callback_query): return
    data = await state.get_data()
    url = data.get("temp_url")
    if url:
        await state.update_data(user_text=url)
        await callback_query.message.edit_text("–°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏:", reply_markup=get_skip_keyboard())
        await state.set_state(UserState.waiting_for_name)
    else:
        await callback_query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await callback_query.answer()

@dp.callback_query(F.data == "cancel_url")
async def process_cancel_url_callback(callback_query: CallbackQuery):
    await callback_query.message.edit_text("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.answer()

@dp.callback_query(F.data.startswith('del_'))
async def process_delete_callback(callback_query: CallbackQuery):
    if not await check_access(callback_query): return
    record_id = int(callback_query.data.split('_')[1])
    keyboard = get_delete_confirmation_keyboard(record_id)
    await callback_query.message.edit_text(
        callback_query.message.html_text + "\n\n‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?</b>",
        parse_mode="HTML", reply_markup=keyboard
    )
    await callback_query.answer()

@dp.callback_query(F.data.startswith('confirm_del_'))
async def confirm_delete_callback(callback_query: CallbackQuery):
    if not await check_access(callback_query): return
    record_id = int(callback_query.data.split('_')[2])
    if await delete_message_by_id(callback_query.from_user.id, record_id):
        await callback_query.message.delete()
        await callback_query.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
    else:
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å.", show_alert=True)

@dp.callback_query(F.data.startswith('cancel_del_'))
async def cancel_delete_callback(callback_query: CallbackQuery):
    if not await check_access(callback_query): return
    original_html_text = callback_query.message.html_text.split("\n\n‚ùì")[0]
    record_id = int(callback_query.data.split('_')[2])
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_record_{record_id}")
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{record_id}")
    builder.adjust(2)
    await callback_query.message.edit_text(original_html_text, parse_mode="HTML", reply_markup=builder.as_markup())
    await callback_query.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@dp.message(UserState.waiting_for_deletion_confirmation)
async def process_deletion_confirmation(message: types.Message, state: FSMContext):
    if not await check_access(message): return
    if message.text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë":
        keyboard = ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —É–¥–∞–ª–µ–Ω–∏–µ")], [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ")]], resize_keyboard=True)
        await message.answer(
            "‚ö†Ô∏è <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!</b>\n\n–í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–ø–∏—Å–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
            parse_mode="HTML", reply_markup=keyboard
        )
        await state.set_state(UserState.waiting_for_final_confirmation)
    else:
        await message.answer("‚Ü©Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
        await state.clear()

@dp.message(UserState.waiting_for_final_confirmation)
async def process_final_deletion(message: types.Message, state: FSMContext):
    if not await check_access(message): return
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —É–¥–∞–ª–µ–Ω–∏–µ":
        if await delete_messages(message.from_user.id):
            await message.answer("üóë –í—Å–µ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", reply_markup=get_main_keyboard())
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚Ü©Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
    await state.clear()

# (–ò–ó–ú–ï–ù–ï–ù–ò–ï): –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ URL
@dp.message()
async def handle_text_message(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ URL –∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã,
    –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏.
    """
    if not await check_access(message): return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã —É–∂–µ –≤ –∫–∞–∫–æ–º-—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    current_state = await state.get_state()
    if current_state is not None:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ ¬´‚ùå –û—Ç–º–µ–Ω–∏—Ç—å¬ª.",
        )
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ URL (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ) –∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã,
    # –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.set_state(UserState.waiting_for_text)
    await process_text(message, state)


async def main():
    try:
        await init_db()
        setup_scheduler(bot, ALLOWED_USER_ID)
        await dp.start_polling(bot)
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
